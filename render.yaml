# Render.com deployment configuration
# See: https://render.com/docs/yaml-spec

services:
  # PostgreSQL Database (managed)
  - type: pserv
    name: sms-postgres
    env: docker
    plan: starter
    region: oregon
    databases:
      - name: school_management
        user: sms_user

  # Redis (managed)
  - type: redis
    name: sms-redis
    env: docker
    plan: starter
    region: oregon
    maxmemoryPolicy: noeviction

  # API Service
  - type: web
    name: sms-api
    env: docker
    region: oregon
    plan: starter
    dockerfilePath: ./apps/api/Dockerfile
    dockerContext: .
    envVars:
      - key: NODE_ENV
        value: production
      - key: TZ
        value: Africa/Monrovia
      - key: PORT
        value: 4000
      - key: DATABASE_URL
        fromDatabase:
          name: school_management
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: sms-redis
          property: connectionString
      - key: JWT_SECRET
        generateValue: true
      - key: JWT_EXPIRES_IN
        value: 15m
      - key: JWT_REFRESH_EXPIRES_IN
        value: 7d
      - key: CORS_ORIGIN
        fromService:
          type: web
          name: sms-web
          property: host
      - key: FRONTEND_URL
        fromService:
          type: web
          name: sms-web
          property: host
      - key: SMTP_HOST
        sync: false
      - key: SMTP_PORT
        value: 587
      - key: SMTP_USER
        sync: false
      - key: SMTP_PASSWORD
        sync: false
      - key: SMTP_FROM
        value: noreply@school.local
      - key: SCHOOL_NAME
        value: Demo High School
      - key: SEED_ADMIN_EMAIL
        value: admin@school.local
      - key: SEED_ADMIN_PASSWORD
        generateValue: true
    buildCommand: npm ci && cd apps/api && npx prisma generate && npm run build
    startCommand: cd apps/api && npx prisma migrate deploy && npx prisma db seed && npm run start:prod
    healthCheckPath: /health/ready

  # Web Service (Next.js)
  - type: web
    name: sms-web
    env: docker
    region: oregon
    plan: starter
    dockerfilePath: ./apps/web/Dockerfile
    dockerContext: .
    envVars:
      - key: NODE_ENV
        value: production
      - key: TZ
        value: Africa/Monrovia
      - key: NEXT_PUBLIC_API_URL
        fromService:
          type: web
          name: sms-api
          property: host
    buildCommand: npm ci && cd apps/web && npm run build
    startCommand: cd apps/web && npm run start

  # Worker Service (BullMQ)
  - type: worker
    name: sms-worker
    env: docker
    region: oregon
    plan: starter
    dockerfilePath: ./apps/worker/Dockerfile
    dockerContext: .
    envVars:
      - key: NODE_ENV
        value: production
      - key: TZ
        value: Africa/Monrovia
      - key: DATABASE_URL
        fromDatabase:
          name: school_management
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: sms-redis
          property: connectionString
      - key: SMTP_HOST
        sync: false
      - key: SMTP_PORT
        value: 587
      - key: SMTP_USER
        sync: false
      - key: SMTP_PASSWORD
        sync: false
    buildCommand: npm ci && cd apps/worker && npm run build
    startCommand: cd apps/worker && npm run start:prod
