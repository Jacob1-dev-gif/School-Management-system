name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build -- --filter=@school/shared

      - name: Build API
        run: npm run build -- --filter=@school/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Build Web
        run: npm run build -- --filter=@school/web
        env:
          NEXT_PUBLIC_API_URL: http://localhost:4000

      - name: Build Worker
        run: npm run build -- --filter=@school/worker
        env:
          REDIS_URL: redis://localhost:6379

      - name: Lint
        run: npm run lint || true

  test:
    runs-on: ubuntu-latest
    needs: lint-and-build

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run migrations
        run: |
          cd apps/api
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Run tests
        run: npm run test || echo "Tests not yet implemented"
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -f infra/dockerfiles/Dockerfile.api -t school-api:test .
          docker build -f infra/dockerfiles/Dockerfile.web -t school-web:test .
          docker build -f infra/dockerfiles/Dockerfile.worker -t school-worker:test .

      - name: Test Docker Compose
        run: |
          echo "DATABASE_URL=postgresql://school:school123@localhost:5432/school_db" > .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "JWT_SECRET=test-secret" >> .env
          echo "JWT_REFRESH_SECRET=test-refresh-secret" >> .env
          docker compose config
